{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nexport class XhrHttpClient extends HttpClient {\n  constructor(logger) {\n    super();\n    this._logger = logger;\n  }\n  /** @inheritDoc */\n  send(request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      // Explicitly setting the Content-Type header for React Native on Android platform.\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      const headers = request.headers;\n      if (headers) {\n        Object.keys(headers).forEach(header => {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n      if (request.abortSignal) {\n        request.abortSignal.onabort = () => {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n      xhr.onload = () => {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n        }\n      };\n      xhr.onerror = () => {\n        this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n      xhr.ontimeout = () => {\n        this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\n        reject(new TimeoutError());\n      };\n      xhr.send(request.content || \"\");\n    });\n  }\n}","map":{"version":3,"names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","XhrHttpClient","constructor","logger","_logger","send","request","abortSignal","aborted","Promise","reject","method","Error","url","resolve","xhr","XMLHttpRequest","open","withCredentials","undefined","setRequestHeader","headers","Object","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","statusText","response","responseText","onerror","log","Warning","ontimeout","content"],"sources":["/Users/hoangtoannguyen/HCMUTE/CCPTPM/Documents/video-editing/client/node_modules/@microsoft/signalr/src/XhrHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}