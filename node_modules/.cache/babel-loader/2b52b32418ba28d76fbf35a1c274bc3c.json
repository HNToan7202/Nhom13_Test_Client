{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\n/** @private */\nexport class WebSocketTransport {\n  constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\n    this._logger = logger;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logMessageContent = logMessageContent;\n    this._webSocketConstructor = webSocketConstructor;\n    this._httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n    this._headers = headers;\n  }\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n      if (token) {\n        url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      url = url.replace(/^http/, \"ws\");\n      let webSocket;\n      const cookies = this._httpClient.getCookieString(url);\n      let opened = false;\n      if (Platform.isNode) {\n        const headers = {};\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n        if (cookies) {\n          headers[HeaderNames.Cookie] = `${cookies}`;\n        }\n        // Only pass headers when in non-browser environments\n        webSocket = new this._webSocketConstructor(url, undefined, {\n          headers: {\n            ...headers,\n            ...this._headers\n          }\n        });\n      }\n      if (!webSocket) {\n        // Chrome is not happy with passing 'undefined' as protocol\n        webSocket = new this._webSocketConstructor(url);\n      }\n      if (transferFormat === TransferFormat.Binary) {\n        webSocket.binaryType = \"arraybuffer\";\n      }\n      webSocket.onopen = _event => {\n        this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\n        this._webSocket = webSocket;\n        opened = true;\n        resolve();\n      };\n      webSocket.onerror = event => {\n        let error = null;\n        // ErrorEvent is a browser only type we need to check if the type exists before using it\n        if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n          error = event.error;\n        } else {\n          error = \"There was an error with the transport\";\n        }\n        this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\n      };\n      webSocket.onmessage = message => {\n        this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\n        if (this.onreceive) {\n          try {\n            this.onreceive(message.data);\n          } catch (error) {\n            this._close(error);\n            return;\n          }\n        }\n      };\n      webSocket.onclose = event => {\n        // Don't call close handler if connection was never established\n        // We'll reject the connect call instead\n        if (opened) {\n          this._close(event);\n        } else {\n          let error = null;\n          // ErrorEvent is a browser only type we need to check if the type exists before using it\n          if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n            error = event.error;\n          } else {\n            error = \"WebSocket failed to connect. The connection could not be found on the server,\" + \" either the endpoint may not be a SignalR endpoint,\" + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\" + \" If you have multiple servers check that sticky sessions are enabled.\";\n          }\n          reject(new Error(error));\n        }\n      };\n    });\n  }\n  send(data) {\n    if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\n      this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\n      this._webSocket.send(data);\n      return Promise.resolve();\n    }\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  }\n  stop() {\n    if (this._webSocket) {\n      // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n      this._close(undefined);\n    }\n    return Promise.resolve();\n  }\n  _close(event) {\n    // webSocket will be null if the transport did not start successfully\n    if (this._webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this._webSocket.onclose = () => {};\n      this._webSocket.onmessage = () => {};\n      this._webSocket.onerror = () => {};\n      this._webSocket.close();\n      this._webSocket = undefined;\n    }\n    this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n    if (this.onclose) {\n      if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\n      } else if (event instanceof Error) {\n        this.onclose(event);\n      } else {\n        this.onclose();\n      }\n    }\n  }\n  _isCloseEvent(event) {\n    return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\n  }\n}","map":{"version":3,"names":["HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","WebSocketTransport","constructor","httpClient","accessTokenFactory","logger","logMessageContent","webSocketConstructor","headers","_logger","_accessTokenFactory","_logMessageContent","_webSocketConstructor","_httpClient","onreceive","onclose","_headers","connect","url","transferFormat","isRequired","isIn","log","Trace","token","indexOf","encodeURIComponent","Promise","resolve","reject","replace","webSocket","cookies","getCookieString","opened","isNode","name","value","Cookie","undefined","Binary","binaryType","onopen","_event","Information","_webSocket","onerror","event","error","ErrorEvent","onmessage","message","data","_close","Error","send","readyState","OPEN","stop","close","_isCloseEvent","wasClean","code","reason"],"sources":["/Users/hoangtoannguyen/HCMUTE/CCPTPM/Documents/video-editing/client/node_modules/@microsoft/signalr/src/WebSocketTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}