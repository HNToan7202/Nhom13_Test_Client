{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\n// Not exported from 'index', this type is internal.\n/** @private */\nexport class LongPollingTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  // This is an internal type, not exported from 'index' so this is really just internal.\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._url = url;\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n    // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n    if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n    const [name, value] = getUserAgentHeader();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n    if (transferFormat === TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    }\n    const token = await this._getAccessToken();\n    this._updateHeaderToken(pollOptions, token);\n    // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n    const pollUrl = `${url}&_=${Date.now()}`;\n    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n    if (response.statusCode !== 200) {\n      this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n      // Mark running as false so that the poll immediately ends and runs the close logic\n      this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n  async _getAccessToken() {\n    if (this._accessTokenFactory) {\n      return await this._accessTokenFactory();\n    }\n    return null;\n  }\n  _updateHeaderToken(request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n    if (token) {\n      request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      return;\n    }\n    if (request.headers[HeaderNames.Authorization]) {\n      delete request.headers[HeaderNames.Authorization];\n    }\n  }\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        // We have to get the access token on each poll, in case it changes\n        const token = await this._getAccessToken();\n        this._updateHeaderToken(pollOptions, token);\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n          this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n          if (response.statusCode === 204) {\n            this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n            // Unexpected status code\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n      // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n    return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\n  }\n  async stop() {\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n    // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n    this._running = false;\n    this._pollAbort.abort();\n    try {\n      await this._receiving;\n      // Send DELETE to clean up long polling on the server\n      this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: {\n          ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      const token = await this._getAccessToken();\n      this._updateHeaderToken(deleteOptions, token);\n      await this._httpClient.delete(this._url, deleteOptions);\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n      // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n      this._raiseOnClose();\n    }\n  }\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n      this._logger.log(LogLevel.Trace, logMessage);\n      this.onclose(this._closeError);\n    }\n  }\n}","map":{"version":3,"names":["AbortController","HttpError","TimeoutError","HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","constructor","httpClient","accessTokenFactory","logger","options","_httpClient","_accessTokenFactory","_logger","_pollAbort","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","token","_getAccessToken","_updateHeaderToken","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","request","Authorization","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","delete","logMessage"],"sources":["/Users/hoangtoannguyen/HCMUTE/CCPTPM/Documents/video-editing/client/node_modules/@microsoft/signalr/src/LongPollingTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}