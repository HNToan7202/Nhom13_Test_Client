{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: function (newDate, wrapperVariant) {\n      let selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}","map":{"version":3,"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","parseInput","draftState","dispatch","useReducer","state","action","type","payload","areValuesEqual","initialDate","setInitialDate","useState","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","arguments","length","undefined","shouldCloseOnSelect","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"sources":["/Users/hoangtoannguyen/HCMUTE/CCPTPM/Documents/video-editing/client/node_modules/@mui/lab/internal/pickers/hooks/usePickerState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}