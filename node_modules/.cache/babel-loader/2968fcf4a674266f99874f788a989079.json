{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"onChange\", \"ToolbarComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport DateTimePickerToolbar from '../DateTimePicker/DateTimePickerToolbar';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/date-time-picker/)\n *\n * API:\n *\n * - [StaticDateTimePicker API](https://mui.com/api/static-date-time-picker/)\n */\nconst StaticDateTimePicker = /*#__PURE__*/React.forwardRef(function StaticDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiStaticDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n      displayStaticWrapperAs = 'mobile',\n      ToolbarComponent = DateTimePickerToolbar\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateTimePicker.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    leftArrowButton: PropTypes.object,\n    rightArrowButton: PropTypes.object,\n    switchViewButton: PropTypes.object\n  }),\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)\n} : void 0;\nexport default StaticDateTimePicker;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useDateTimePickerDefaultizedProps","DateTimePickerToolbar","PickerStaticWrapper","Picker","useDateTimeValidation","parsePickerInputValue","usePickerState","jsx","_jsx","valueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","StaticDateTimePicker","forwardRef","inProps","ref","props","validationError","pickerProps","inputProps","displayStaticWrapperAs","ToolbarComponent","other","DateInputProps","children","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","ampm","ampmInClock","autoFocus","className","string","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","leftArrowButton","object","rightArrowButton","switchViewButton","dateRangeIcon","node","defaultCalendarMonth","any","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableIgnoringDatePartForTimeValidation","disableMaskedInput","disableOpenPicker","disablePast","oneOf","getClockLabelText","func","getOpenDialogAriaText","getViewSwitchingButtonText","hideTabs","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","current","key","number","leftArrowButtonText","loading","mask","maxDate","maxDateTime","maxTime","minDate","minDateTime","minTime","minutesStep","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","onYearChange","open","OpenPickerButtonProps","openTo","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableTime","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","timeIcon","toolbarFormat","toolbarPlaceholder","value","Date","views","arrayOf"],"sources":["/Users/hoangtoannguyen/HCMUTE/CCPTPM/Documents/video-editing/client/node_modules/@mui/lab/StaticDateTimePicker/StaticDateTimePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"onChange\", \"ToolbarComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport DateTimePickerToolbar from '../DateTimePicker/DateTimePickerToolbar';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/date-time-picker/)\n *\n * API:\n *\n * - [StaticDateTimePicker API](https://mui.com/api/static-date-time-picker/)\n */\nconst StaticDateTimePicker = /*#__PURE__*/React.forwardRef(function StaticDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiStaticDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    ToolbarComponent = DateTimePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    leftArrowButton: PropTypes.object,\n    rightArrowButton: PropTypes.object,\n    switchViewButton: PropTypes.object\n  }),\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)\n} : void 0;\nexport default StaticDateTimePicker;"],"mappings":"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"},"metadata":{},"sourceType":"module"}